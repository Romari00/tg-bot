import random
import re
import time
from datetime import datetime, timedelta

from sqlalchemy import insert, select, exists, update
from telebot.apihelper import ApiException

from connection.db import Session
from telebot import types
import telebot
from models.user import User, Eco, UserLogi, UserWho

banword = ['nigger', '–∫—Ä—É—Ç–æ–π', '–ø—Ä–æ—à–º–∞–Ω–¥–æ–≤–∫–∞ Aruku', 'nigga', '—Å—É—á–∫–∞', 'naga', 'c—ã–Ω –±—É–ª–æ—á–Ω–∏–∫–∞','–ø—Ä–∏—ë–º—ã—à', '–ø–æ–¥–≤–∞–ª—å–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫', '–Ω–∏–≥–≥–µ—Ä', '–±–µ–∑–¥–∞—Ä—å', '–Ω–∏–≥–∞', '—É—à–ª—ë–ø–æ–∫', '—É–µ–±–∞–Ω', '—Ç–≤–∞—Ä—å', '–Ω–∞–≥–∞', '–≥–æ–º–æ–¥—Ä–∏–ª', '—Å—ã–Ω –º–∏—Ä–∞–∂–∞', 'faggot', '—à–ª—é—Ö–∞', '–ø–∏–¥–æ—Ä', '–ø–∏–¥–æ—Ä–∞—Å', '–ø–µ–¥–∏–∫', '–≥–æ–º–∏–∫', '–ø–µ—Ç—É—Ö']
special_for_Remedyv = ['–ø—Ä–æ—à–º–∞–Ω–¥–æ–≤–∫–∞ Aruku', '—Å—É—á–∫–∞', '—à–ª—é—Ö–∞', '—Ç–≤–∞—Ä—å', '–ª—É—á—à–∞—è']
# –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '6734713504:AAH1v07_y86elzFk0Y6rL-QsRYOi_FUmjQ4'


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)
none = {6311509652:'–°—Ç–∞—Å—è'}
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

moralfuck = ['–º–æ—Ä–∞–ª—Ñ–∞–∫', 'moralfuck', '–º–æ—Ä–∞–ª—Ñ–∞–∫–∏', '–º–æ—Ä–∞–ª—Ñ–∞–∫–∞', '–º–æ—Ä–∞–ª–∫–µ–∫']
stupid=open('media/stupid.MOV', 'rb')

@bot.message_handler(commands=['secret'])
def test(message):
    bot.delete_messages(message.chat.id,message_ids=[message.message_id, message.message_id-1, message.message_id-2])


@bot.message_handler(commands=['who'])
def who(message):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ banword
    random_word = random.choice(banword)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    new_who_entry = UserWho(user_id=message.from_user.id, message_id=message.message_id, chat_id=message.chat.id, result=random_word)
    with Session.begin() as session:
        session.add(new_who_entry)
        session.commit()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton(f'–∫—Ç–æ?', callback_data=f'who_result_{message.from_user.id}')
    markup.add(btn1, row_width=8)
    bot.send_message(message.chat.id, '—Ç—ã–∫', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('who_result_'))
def handle_who_result(call):
    chat_id = call.message.chat.id  # –ü–æ–ª—É—á–∞–µ–º chat_id
    message_id = call.message.message_id - 1  # –ü–æ–ª—É—á–∞–µ–º message_id
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with Session() as session:
        user_info = session.query(UserWho).filter_by(chat_id=chat_id, message_id=message_id).first()
        username = session.query(User).filter_by(id=user_info.user_id).first()
        if username:
            if username.username != None:
                if user_info:
                    result = user_info.result
                    bot.answer_callback_query(call.id, f'{username.username},  —Å–µ–≥–æ–¥–Ω—è {result} ‚ù§Ô∏è', show_alert=True)
                else:
                    bot.send_message(chat_id, "–∏–∑–≤–∏–Ω–∏—Ç–µ")
            else:
                bot.send_message(chat_id, "–∏–∑–≤–∏–Ω–∏—Ç–µ")
        else:
            bot.send_message(chat_id, "–∏–∑–≤–∏–Ω–∏—Ç–µ")


@bot.message_handler(commands=['hug'])
def pat(message):
    hug = open('media/hug.gif', 'rb')
    user_active = message.from_user.username
    if message.reply_to_message:
        user_passive = message.reply_to_message.from_user.username
        if user_active == 'Remedyv':
            bot.reply_to(message, f'{user_active} –æ–±–Ω—è–ªa {user_passive}')
            bot.send_animation(message.chat.id, hug)

        else:
            bot.reply_to(message, f'{user_active} –æ–±–Ω—è–ª {user_passive}')
            bot.send_animation(message.chat.id, hug)

@bot.message_handler(commands=['kiss'])
def pat(message):
    kiss = open('media/kiss.gif', 'rb')
    user_active = message.from_user.username
    if message.reply_to_message:
        user_passive = message.reply_to_message.from_user.username
        if user_active == 'Remedyv':
            bot.reply_to(message, f'{user_active} –ø–æ—Ü–µ–ª–æ–≤–∞–ªa {user_passive}')
            bot.send_animation(message.chat.id, kiss)
        else:
            bot.reply_to(message, f'{user_active} –ø–æ—Ü–µ–ª–æ–≤–∞–ª {user_passive}')
            bot.send_animation(message.chat.id, kiss)

@bot.message_handler(commands=['hm'])
def pat(message):
    fuck = open('media/fuck.gif', 'rb')
    user_active = message.from_user.username
    if message.reply_to_message:
        user_passive = message.reply_to_message.from_user.username
        bot.reply_to(message, f'{user_active} *–∫—Ö–º* {user_passive}')
        bot.send_animation(message.chat.id, fuck)
@bot.message_handler(commands=['f_ck'])
def pat(message):
    nahui = open('media/nahui.gif', 'rb')
    user_active = message.from_user.username
    if message.reply_to_message:
        user_passive = message.reply_to_message.from_user.username
        if user_active == 'Remedyv':
            bot.reply_to(message, f'{user_active} –ø–æ—Å–ª–∞–ª–∞ –Ω–∞—Ö—É–π {user_passive}')
            bot.send_animation(message.chat.id, nahui)
        else:
            bot.reply_to(message, f'{user_active} –ø–æ—Å–ª–∞–ª –Ω–∞—Ö—É–π {user_passive}')
            bot.send_animation(message.chat.id, nahui)

@bot.message_handler(commands=['hit'])
def pat(message):
    kick = open('media/kill.gif', 'rb')
    user_active = message.from_user.username
    if message.reply_to_message:
        user_passive = message.reply_to_message.from_user.username
        if user_active == 'Remedyv':
            bot.reply_to(message, f'{user_active} —É–¥–∞—Ä–∏–ª–∞ {user_passive}')
            bot.send_animation(message.chat.id, kick)
        else:
            bot.reply_to(message, f'{user_active} —É–¥–∞—Ä–∏–ª {user_passive}')
            bot.send_animation(message.chat.id, kick)

@bot.message_handler(commands=['nip'])
def pat(message):
    nip = open('media/nip.gif.mp4', 'rb')
    nip_rem = open('media/nip_rem.mp4', 'rb')
    user_active = message.from_user.username
    if message.reply_to_message:
        user_passive = message.reply_to_message.from_user.username
        if user_active == 'Remedyv':
            bot.reply_to(message, f'{user_active} —É–∫—É—Å–∏–ª–∞ {user_passive}')
            bot.send_animation(message.chat.id, nip_rem)
        else:
            bot.reply_to(message, f'{user_active} —É–∫—É—Å–∏–ª {user_passive}')
            bot.send_animation(message.chat.id, nip)

@bot.message_handler(commands=['pat'])
def pat(message):
    hug = open('media/hug_women.mp4', 'rb')
    hug_rem = open('media/hug_rem.gif', 'rb')
    user_active = message.from_user.username
    if message.reply_to_message:
        user_passive = message.reply_to_message.from_user.username
        if user_active == 'Remedyv':
            bot.reply_to(message, f'{user_active} –ø–æ–≥–ª–∞–¥–∏–ª–∞ {user_passive}')
            bot.send_animation(message.chat.id, hug)
        else:
            bot.reply_to(message, f'{user_active} –ø–æ–≥–ª–∞–¥–∏–ª {user_passive}')
            bot.send_animation(message.chat.id, hug)


@bot.message_handler(commands=['invite'])
def pat(message):
    hug = open('media/taringa-anime.gif', 'rb')
    user_active = message.from_user.username
    if message.reply_to_message:
        user_passive = message.reply_to_message.from_user.username
        # if not user_passive:
        #     user_passive = 'haku'

        bot.reply_to(message, f'{user_active} –∑–æ–≤–µ—Ç {user_passive} –∏–≥—Ä–∞—Ç—å –≤ –≥—É—Å–µ–π')
        bot.send_animation(message.chat.id, hug)
@bot.message_handler(commands=['wait'])
def pat(message):
    hug = open('media/cs.gif', 'rb')
    hug_remi = open('media/wait_rem.gif', 'rb')
    user_active = message.from_user.username
    if message.reply_to_message:

        user_passive = message.reply_to_message.from_user.username
        if user_active == 'Remedyv':

            bot.reply_to(message, f'{user_active} –∂–¥—ë—Ç {user_passive} –≤ Counter-Strike')
            bot.send_animation(message.chat.id, hug_remi)
        else:
            bot.reply_to(message, f'{user_active} –∂–¥—ë—Ç {user_passive} –≤ Counter-Strike')
            bot.send_animation(message.chat.id, hug)

@bot.message_handler(commands=['start'])

def entered_users(message):

    if message.from_user.username== None:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π username')
    else:
        with Session.begin() as session:
            user_have = session.query(exists().where(User.id == message.from_user.id)).scalar()
            if not user_have:
                users_dict = dict(id = message.from_user.id, name = message.from_user.first_name, username = message.from_user.username)
                query = insert(User).values(users_dict)
                balance_dict = dict(id = message.from_user.id, balance = 100)
                query1 = insert(Eco).values(balance_dict)
                session.execute(query)
                session.execute(query1)
                session.commit()
                bot.send_message(message.chat.id, '–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å‚úÖ')

            else:
                bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∞–ª–∏—Å—å‚úÖ')

@bot.message_handler(commands=['coinflip'])

def bet(message):
    global user1
    user1 = message.from_user.id
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—Éüí∞:")
    bot.register_next_step_handler(message, process_bet)

def process_bet(message):
    global user1
    if message.from_user.id != user1:
        bot.register_next_step_handler(message, process_bet)


    else:
        global bet_amount, new_balance
        bet_amount = message.text
        try:
            bet_amount = int(bet_amount)
            if bet_amount <= 0:
                bot.reply_to(message, '–ò–î–ò –ù–ê–•–£–ô –±–µ–∑ –Ω–µ–≥–∞—Ç–∏–≤–∞\n–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:')
                bot.register_next_step_handler(message, process_bet)
                return
        except ValueError:
            bot.reply_to(message, '–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç!!!')
            bot.register_next_step_handler(message, process_bet)
            return

        user1 = message.from_user.id
        with Session.begin() as session:
            query_balance = select(Eco.balance).select_from(Eco).where(Eco.id == user1)
            result = session.execute(query_balance).fetchone()
            balance_amount = result[0]

        if balance_amount < bet_amount:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            return
        else:
            new_balance = balance_amount - bet_amount
            query_update_balance = update(Eco).values(balance = new_balance).where(Eco.id == user1)
            session.execute(query_update_balance)
            session.commit()

            markup = types.InlineKeyboardMarkup(row_width=2)
            btn1 = types.InlineKeyboardButton('–û—Ä—ë–ª', callback_data='–æ—Ä—ë–ª')
            btn2 = types.InlineKeyboardButton('–ù–æ–≤–æ—Å–∏–±', callback_data='–Ω–æ–≤–æ—Å–∏–±')
            markup.add(btn1, btn2)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—ë–ª –∏–ª–∏ –Ω–æ–≤–æ—Å–∏–±:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ['–æ—Ä—ë–ª', '–Ω–æ–≤–æ—Å–∏–±'])
def process_coin_choice(call):
    global new_balance, bet_amount
    if call.from_user.id != user1:
        bot.register_next_step_handler(call.message, process_coin_choice)
    else:
        choice = call.data.lower()
        if choice not in ['–æ—Ä—ë–ª', '–Ω–æ–≤–æ—Å–∏–±']:
            bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—ë–ª –∏–ª–∏ –Ω–æ–≤–æ—Å–∏–±.")
            return

        bot.delete_message(call.message.chat.id, call.message.message_id)
        result = random.choice(['–æ—Ä—ë–ª', '–Ω–æ–≤–æ—Å–∏–±'])

        if result == '–æ—Ä—ë–ª':
            #img = open('media/coinflip_orel.gif', 'rb')
            vidos = open('media/or.mp4', 'rb')
            #sent_message = bot.send_animation(call.message.chat.id, img)
            sent_message = bot.send_video(call.message.chat.id, vidos)

            time.sleep(6)
        elif result == '–Ω–æ–≤–æ—Å–∏–±':
            #img = open('media/coinflip_nov.gif', 'rb')
            vidos = open('media/novasib.MP4', 'rb')
            #sent_message = bot.send_animation(call.message.chat.id, img)
            sent_message = bot.send_video(call.message.chat.id, vidos)

            time.sleep(6)


        if choice == result:
            win = 2*bet_amount
            bot.send_message(call.message.chat.id, f'{call.from_user.username}, –í—ã –ø–æ–ª—É—á–∏–ª–∏: <b>{win}</b>üí∞\n–í—ã –≤—ã–±—Ä–∞–ª–∏ <b><i>{choice}</i></b>, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{result}</b>.', parse_mode='html')
            with Session.begin() as session:
                new_balance += win
                query_update_balance = update(Eco).values(balance=new_balance).where(Eco.id == call.from_user.id)
                session.execute(query_update_balance)
                session.commit()

        else:
            bot.send_message(call.message.chat.id, f'{call.from_user.username}, –í—ã –ø—Ä–æ–µ–±–∞–ª–∏: <b>{bet_amount}</b>üí∞\n–í—ã –≤—ã–±—Ä–∞–ª–∏ <s><b><i>{choice}</i></b></s>, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{result}</b>.', parse_mode='html')

        bot.delete_message(call.message.chat.id, sent_message.message_id)

@bot.message_handler(commands=['give'])
def process_give_command(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /give
    match = re.match(r'/give (@?\w+) (\d+)', message.text)
    if match:
        username = match.group(1)  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        amount = int(match.group(2))  # –°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏

        if username.startswith('@'):
            username = username[1:]

        with Session.begin() as session:
            user = session.query(User).filter(User.username == username).first()
            if user:
                sender_balance = session.query(Eco).filter(Eco.id == message.from_user.id).first()
                if sender_balance.balance >= amount:
                    sender_balance.balance -= amount
                    user_balance = session.query(Eco).filter(Eco.id == user.id).first()
                    user_balance.balance += amount
                    session.commit()
                    bot.reply_to(message, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ {amount}üí∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
                else:
                    bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚ùóÔ∏è")
            else:
                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùóÔ∏è")
    else:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: /give <username> <amount> Ô∏è‚ùóÔ∏è")


@bot.message_handler(commands=['door'])
def show_doors(message):
    global user_door
    user_door = message.from_user.id
    is_on_cooldown, remaining_time = check_command_cooldown(message.from_user.id)
    if is_on_cooldown:
        hours = remaining_time.seconds // 3600
        minutes = (remaining_time.seconds % 3600) // 60
        seconds = remaining_time.seconds % 60
        time_left_str = f"{hours}:{minutes}:{seconds}"

        bot.reply_to(message,
                     f"–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É /door –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞. –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time_left_str}üïë")
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    button1 = types.InlineKeyboardButton("–î–≤–µ—Ä—å 1", callback_data="door_1")
    button2 = types.InlineKeyboardButton("–î–≤–µ—Ä—å 2", callback_data="door_2")
    button3 = types.InlineKeyboardButton("–î–≤–µ—Ä—å 3", callback_data="door_3")
    markup.add(button1, button2, button3)

    with open('media/door.png', 'rb') as door_image:
        bot.send_photo(message.chat.id, door_image, caption="–ö–∞–∫—É—é –¥–≤–µ—Ä—å –∑–∞–∫—Ä—ã–ª–∏ Remedyv —Å MoralFucküö™", reply_markup=markup)

    update_last_command_time(message.from_user.id)


def check_command_cooldown(user_id):
    session = Session()
    try:
        user_log = session.query(UserLogi).filter_by(user_id=user_id, command='/door').order_by(UserLogi.date_time.desc()).first()

        if user_log:
            last_command_time = datetime.strptime(user_log.date_time, '%Y-%m-%d %H:%M:%S')  # –ò–∑–º–µ–Ω–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–¥–µ—Å—å
            time_since_last_command = datetime.now() - last_command_time
            if time_since_last_command < timedelta(hours=3):
                remaining_time = timedelta(hours=3) - time_since_last_command
                return True, remaining_time
            else:
                return False, None
        else:
            return False, None
    finally:
        session.close()


def update_last_command_time(user_id):
    with Session.begin() as session:
        new_log_entry = UserLogi(user_id=user_id, date_time=datetime.now().strftime('%Y-%m-%d %H:%M:%S'), command='/door')
        session.add(new_log_entry)
        session.commit()
@bot.callback_query_handler(func=lambda call: call.data.startswith('door_'))
def open_door(call):
    if call.from_user.id != user_door:
        return
    else:
        bot.delete_message(call.message.chat.id, call.message.id)
        door_number = int(call.data.split('_')[1])

        coins = random.choice([50, 100, 150])

        with Session.begin() as session:
            user_id = call.from_user.id
            user_balance = session.query(Eco).filter(Eco.id == user_id).first()
            user_balance.balance += coins
            session.commit()

        bot.send_message(call.message.chat.id, f"–í—ã –æ—Ç–∫—Ä—ã–ª–∏ üö™–î–≤–µ—Ä—å {door_number} –∏ –Ω–∞—à–ª–∏ MoralFuck —Å Remedyv\n–û–Ω–∏ –¥–∞–ª–∏ —Ç–µ–±–µ {coins}üí∞ –º–æ–Ω–µ—Ç–æ–∫, —á—Ç–æ–± —Ç—ã —É–∂–µ –æ—Ç—ä–µ–±–∞–ª—Å—è, –±–µ–∑ –Ω–µ–≥–∞—Ç–∏–≤–∞.")


@bot.message_handler(commands=['balance'])
def check_balance(message):
    if len(message.text.split()) > 1:
        username = message.text.split()[1]
    else:
        username = None

    if username:
        if username.startswith('@'):
            username = username[1:]

        with Session.begin() as session:
            user = session.query(User).filter(User.username == username).first()
            if user:
                balance = session.query(Eco.balance).filter(Eco.id == user.id).scalar()
                bot.reply_to(message, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {balance}üí∞")
            else:
                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        with Session.begin() as session:
            balance = session.query(Eco.balance).filter(Eco.id == message.from_user.id).scalar()
            bot.reply_to(message, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞")

# bot.set_my_commands(
#     commands=[telebot.types.BotCommand('start', '—è —Å–∫–∞–∑–∞–ª–∞ —Å—Ç–∞—Ä—Ç—É–µ–º!'),
#                 telebot.types.BotCommand('help', '–≠–≠ –ø–æ–º–æ–≥–∏—Ç–µ'),
#                 telebot.types.BotCommand('balance', '–±–µ–∑—É–ø—Ä–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å'),
#               telebot.types.BotCommand('coinflip', '–±—Ä–æ—Å—å –º–µ–Ω—è'),
#               telebot.types.BotCommand('who', '–∫—Ç–æ —Ç—ã –ø–æ –∂–∏–∑–Ω–∏'),
#               telebot.types.BotCommand('love @', '–ª—é–±–æ–≤—å'),
#               telebot.types.BotCommand('door', '–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, –¥–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è'),
#
#                 telebot.types.BotCommand('give', '–¥–∞–π –º–Ω–µ –¥–µ–Ω—å–≥–∏'),
#                 telebot.types.BotCommand('give', '–¥–∞–π –º–Ω–µ –¥–µ–Ω—å–≥–∏'),
                    #telebot.types.BotCommand('balance', '–±–µ–∑—É–ø—Ä–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å'),
        #               telebot.types.BotCommand('coinflip', '–±—Ä–æ—Å—å –º–µ–Ω—è'),
        #               telebot.types.BotCommand('who', '–∫—Ç–æ —Ç—ã –ø–æ –∂–∏–∑–Ω–∏'),
        #               telebot.types.BotCommand('love @', '–ª—é–±–æ–≤—å'),
        #               telebot.types.BotCommand('door', '–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, –¥–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è'),
        #
        #                 telebot.types.BotCommand('give', '–¥–∞–π –º–Ω–µ –¥–µ–Ω—å–≥–∏'),
        #                 telebot.types.BotCommand('give', '–¥–∞–π –º–Ω–µ –¥–µ–Ω—å–≥–∏'),


#               ],
#               scope=telebot.types.BotCommandScopeChat(-1002035354644)
#
#
#
# )
# @bot.message_handler(commands=['–≥–ª–∞–¥–∏—Ç—å'])
# def gladit(message):
#     bot.reply_to(message, '–∑–∞–µ–±–∏—Å—å —Ä–∞–±–æ—Ç–∞–µ—Ç')

@bot.message_handler(commands=['love'])
def love_is(message):
    if len(message.text.split()) > 1:
        username = message.text.split()[1]
    else:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: /love @username")
        return

    if username.startswith('@'):
        username = username[1:]

    with Session.begin() as session:
        user = session.query(User).filter(User.username == username).first()
        if user:
            bot.reply_to(message, f"‚ù§Ô∏è {message.from_user.username} –ø—Ä–∏–∑–Ω–∞–µ—Ç—Å—è –≤ –ª—é–±–≤–∏ {username} ‚ù§Ô∏è")
        else:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def handle_help(message):
    help_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    help_text += "/start - –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
    help_text += "/coinflip - –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É\n"
    help_text += "/who - —É–∑–Ω–∞—Ç—å –∫—Ç–æ —Ç—ã –ø–æ –∂–∏–∑–Ω–∏\n"
    bot.send_message(message.chat.id, help_text)

# @bot.message_handler(commands=['who'])
#
# def who_i_am(message):
#     if len(message.text.split()) > 1:
#         username = message.text.split()[1]
#     else:
#         username = None
#
#     if username:
#         if username == '@Remedyv':
#             username = 'Remedyv'
#             bot.reply_to(message, f"–°–µ–≥–æ–¥–Ω—è {username} - {random.choice(special_for_Remedyv)}")
#             return
#         if username.startswith('@'):
#             username = username[1:]
#
#         with Session.begin() as session:
#             user = session.query(User).filter(User.username == username).first()
#             if user:
#                 bot.reply_to(message, f"–°–µ–≥–æ–¥–Ω—è {username} - {random.choice(banword)}")
#             else:
#                 name = session.query(User).filter(User.name == username).first()
#                 if name:
#                     bot.reply_to(message, f"–°–µ–≥–æ–¥–Ω—è {name} - {random.choice(banword)}")
#                 else:
#                     bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#     else:
#         if message.from_user.id == 979795224:
#             bot.reply_to(message, f"–°–µ–≥–æ–¥–Ω—è {message.from_user.username} - {random.choice(special_for_Remedyv)}")
#         else:
#             with Session.begin() as session:
#                 user = session.query(User).filter(User.username == message.from_user.username).first()
#                 if user != None:
#                     bot.reply_to(message, f"–°–µ–≥–æ–¥–Ω—è {message.from_user.username} - {random.choice(banword)}")
#                 else:
#                     name = session.query(User).filter(User.name == message.from_user.first_name).first()
#                     if name:
#                         bot.reply_to(message, f"–°–µ–≥–æ–¥–Ω—è {name} - {random.choice(banword)}")
#                     else:
#                         bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")



        # else:
        #     if not message.from_user.username:
        #         bot.reply_to(message, f"–°–µ–≥–æ–¥–Ω—è {message.from_user.first_name} - {random.choice(banword)}")
        #     else:
        #         bot.reply_to(message, f"–°–µ–≥–æ–¥–Ω—è {message.from_user.username} - {random.choice(banword)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–µ—Å–µ–¥–µ




# @bot.message_handler(content_types=['text'])
#
# def check_word(message):
#     # if message.text.lower() == '—á–µ' or message.text.lower() == '—á—ë' :
#     #     bot.send_message(message.chat.id,'–∞ –Ω–∏ —á–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –æ–±—â–∞–π—Å—è')
#     if (message.text == '5 –ø—Ä–∏—á–∏–Ω –∑–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ARUKU'):
#         markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         button1 = types.KeyboardButton('–¢–µ—Ç—Ä–∏—Å —Å MoralFuck')
#         button2 = types.KeyboardButton('/coinflip')
#         button3 = types.KeyboardButton('–ü—Ä–∏–≤–∞—Ç–∫–∞ —Å MoralFuck')
#         button4 = types.KeyboardButton('MoralFuck')
#         button5 = types.KeyboardButton('MoralFuck –≤ 115-–π')
#         markup2.add(button1,button2, button3, button4, button5)
#         bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É', reply_markup=markup2)







    # elif message.text == '–¢–µ—Ç—Ä–∏—Å —Å MoralFuck':
    #     bot./(message.chat.id,'–æ–Ω —Ç—É—Ç –ª—É—á—à–∏–π')
    # elif message.text == '/coinflip':
    #     bot.reply_to(message.chat.id,'—Ç—É—Ç —Ç–æ–∂–µ –ª—É—á—à–∏–π')
    # elif message.text == 'MoralFuck':
    #     bot.reply_to(message.chat.id,'5/5')
    #
    # elif message.text == 'MoralFuck –≤ 115-–π':
    #     bot.reply_to(message.chat.id,'??')
    #
    # elif message.text == '–ü—Ä–∏–≤–∞—Ç–∫–∞ —Å MoralFuck':
    #     bot.reply_to(message.chat.id,'–¥–∞?')




    # if message.text.lower() in banword:
    #     bot.ban_chat_member(message.chat.id, message.from_user.id)
    #     bot.send_message(message.chat.id, '–ò–¥—ë—Ç –Ω–∞—Ö—É–π')













# @bot.message_handler(chat_id=[-1002094586262], commands=['update'])
# def update_command(message):
# bot.set_my_commands(
#     commands=[
#     telebot.types.BotCommand('start', '—è —Å–∫–∞–∑–∞–ª–∞ —Å—Ç–∞—Ä—Ç—É–µ–º!'),
#                 telebot.types.BotCommand('help', '–≠–≠ –ø–æ–º–æ–≥–∏—Ç–µ'),
#               telebot.types.BotCommand('balance', '–±–µ–∑—É–ø—Ä–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å'),
#               telebot.types.BotCommand('coinflip', '–±—Ä–æ—Å—å –º–µ–Ω—è'),
#               telebot.types.BotCommand('who', '–∫—Ç–æ —Ç—ã –ø–æ –∂–∏–∑–Ω–∏'),
#               telebot.types.BotCommand('love ', '—è –ª—é–±–ª—é'),
#               telebot.types.BotCommand('door', '–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, –¥–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è'),
#
#               telebot.types.BotCommand('give', '–¥–∞–π –º–Ω–µ –¥–µ–Ω—å–≥–∏'),
#
#               telebot.types.BotCommand('hm', '—Ö–º–º–º'),
#               telebot.types.BotCommand('hug', '–æ–±–Ω—è—Ç—å'),
#               telebot.types.BotCommand('nip','—É–∫—É—Å–∏—Ç—å'),
#               telebot.types.BotCommand('hit','—É–¥–∞—Ä–∏—Ç—å'),
#               telebot.types.BotCommand('f_ck', '–ø–æ—Å–ª–∞—Ç—å'),
#               telebot.types.BotCommand('wait','–∂–¥–∞—Ç—å'),
#
#               telebot.types.BotCommand('invite','–ø–æ–∑–≤–∞—Ç—å'),
#               telebot.types.BotCommand('pat', '–≥–ª–∞–¥–∏—Ç—å'),
#                 telebot.types.BotCommand('kiss', '–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å'),
#                 telebot.types.BotCommand('test', 'test')
#
#               ],
#               scope=telebot.types.BotCommandScopeChat(-1002094586262)
# )

#


# @bot.message_handler(chat_id=[-1002094586262], commands=['update'])
# def update_command(message):
#     bot.set_my_commands(
#     commands=[telebot.types.BotCommand('door', '–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, –¥–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è')
#
#               ],
#               scope=telebot.types.BotCommandScopeChat(message.chat.id)



# telebot.types.BotCommand('coinflip', '–±—Ä–æ—Å—å –º–µ–Ω—è'),



# @bot.message_handler(chat_id=[-1002035354644], commands=['update'])
# def update_command(message):
#
#     bot.set_my_commands(
#     commands=[telebot.types.BotCommand('start', '—è —Å–∫–∞–∑–∞–ª–∞ —Å—Ç–∞—Ä—Ç—É–µ–º!'),
#               telebot.types.BotCommand('help', '–≠–≠ –ø–æ–º–æ–≥–∏—Ç–µ'),
#               telebot.types.BotCommand('balance', '–±–µ–∑—É–ø—Ä–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å'),
#               telebot.types.BotCommand('coinflip', '–±—Ä–æ—Å—å –º–µ–Ω—è'),
#               telebot.types.BotCommand('who', '–∫—Ç–æ —Ç—ã –ø–æ –∂–∏–∑–Ω–∏'),
#               telebot.types.BotCommand('love', '—è –ª—é–±–ª—é —Ç–µ–±—è'),
#               telebot.types.BotCommand('door', '–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, –¥–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è'),
#               telebot.types.BotCommand('give', '–¥–∞–π –º–Ω–µ –¥–µ–Ω—å–≥–∏')
#               ],
#               scope=telebot.types.BotCommandScopeChat(message.chat.id)
#
#
#
# )


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling(non_stop=True)